name: node-red-demo
adopt-info: node-red
summary: Low-code programming for event-driven applications
description: |
        Node-RED is a flow based programming application for wiring together hardware devices, APIs and online services in new and interesting ways. For more information see http://nodered.org 
        
        ### Modifications
        
        Listens on port 1881 and runs as as service in strict mode by default.
        Fully configurable on port 1882: edit **settings.js** directly from a webpage!

        The snap by default comes with the following packages installed
        node-red dashboard
        CtrlX-Automation-Contrib
        OPCUA contrib
        MongoDB3
        Influxdb 

confinement: strict
grade: stable
base: core20

# Limit architectures as ppcel64 doesn't build currently
architectures:
  - build-on: amd64
  - build-on: arm64

apps:
  node-red:
    command: bin/startNR
    daemon: simple
    restart-condition: on-failure
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - home
      - network-bind
      - network
      - network-observe
      - pulseaudio
      - removable-media
      - serial-port
      

  
      
  npm:
    command: bin/npm
    plugs:
      - home
      - network
  desktop-launch:
    command: bin/desktop-launch
    plugs:
      - desktop
      
slots:
  package-assets:
    content: package-assets
    interface: content
    source:
      read:
      - $SNAP/bin/package-assets/node-red-demo
      
parts:

  node: # We dump in a specific version of node/npm from upstream.
    plugin: dump
    source: 
      - on amd64: https://nodejs.org/dist/v14.15.4/node-v14.15.4-linux-x64.tar.gz
      - on arm64: https://nodejs.org/dist/v14.15.4/node-v14.15.4-linux-arm64.tar.gz
     
     
  node-red:
    after: [node]
    plugin: nil # We use the nil plugin so we can fully override the build with whatever we need to do
    source: .
    stage-packages:
      - python
      - ffmpeg
      - libglu1-mesa 
      - libxi-dev 
      - libxmu-dev 
      - libglu1-mesa-dev
      - freeglut3
      - libpulse0
      - musl-dev
      - musl
    override-build: | # Whatever steps needed to install node-red into the install folder, which gets incorporated into the snap
      PATH=$PATH:../npm/bin
      apt-get install libatomic1
      npm config set unsafe-perm True
      # npm install --prefix $SNAPCRAFT_PART_INSTALL/lib
      npm install --no-audit --no-fund --prefix $SNAPCRAFT_PART_INSTALL/lib node-red node-red-node-ping node-red-node-base64 node-red-node-random node-red-node-rbe node-red-node-serialport node-red-dashboard node-red-contrib-opcua node-red-contrib-influxdb node-red-contrib-mongodb3 node-red-contrib-ctrlx-automation node-red-contrib-s7 node-red-contrib-cip-ethernet-ip node-red-contrib-modbus node-red-contrib-opcda-client
      find $SNAPCRAFT_PART_INSTALL -type f -name '*.js.swp' -delete
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name test -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name doc -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name example -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name sample -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname benchmark* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname .nyc_output -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname unpacked -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name man* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name tst -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname demo -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name bench.gnu -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .npmignore -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .travis.yml -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .jshintrc -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname README.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname HISTORY.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname CONTRIBUTING.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname CHANGE*.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitmodules -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitattributes -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitignore -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname "*~" -exec rm -f {} \;
      VER=$(npm show node-red version)
      echo "VERSION $(npm show node-red version)"
      snapcraftctl set-version $VER
      
  scripts:
    plugin: dump
    source: scripts # snapcraft now prefers local parts to be in snap/local
    organize:
      '*': "bin/"
     
